-------------------------------------------------------
TO GET POSTGIS ON DOKKU:
https://github.com/Kloadut/dokku-pg-plugin/issues/33

docker run -t -i kloadut/postgresql /bin/bash
apt-get update
sudo apt-get install postgresql-9.3-postgis-2.1

While bash is still running on the Docker container,
commit the docker container as the same name:

docker ps (grab image id)
docker commit <image id> kloadut/postgresql

Then do dokku postgresql:create as you would normally.
-------------------------------------------------------
TO SET DOKKU ENVIRONMENT VARAIBLES:

dokku config:set <app_name> KEY1=VALUE1
-------------------------------------------------------
TO RESTART A DOKKU WEB APP:

dokku release <app_name>
dokku deploy <app_name>
-------------------------------------------------------
USEFUL DOKKU COMMANDS:

dokku logs <app_name>
-------------------------------------------------------

104.236.2.144

DB_URL = postgres://hobo_signs:cmsc436@localhost:5432/hobo_signs?sslmode=disable
DB_USER = hobo_signs
DB_PASSWORD = cmsc436
DB_NAME = hobo_signs

-- Enable PostGIS (includes raster)
CREATE EXTENSION postgis;
-- Enable Topology
CREATE EXTENSION postgis_topology;
-- fuzzy matching needed for Tiger
CREATE EXTENSION fuzzystrmatch;
-- Enable US Tiger Geocoder
CREATE EXTENSION postgis_tiger_geocoder;

create table Users (
  username char(20) unique PRIMARY KEY,
  password_hash char(256)
);

create table Posts (
  id serial PRIMARY KEY,
  location geography(POINT,4326),
  location_name text,
  caption char(256),
  owner char(20),
  media_url char(128),
  media_type char(5),
  hashtags text,
  created_at timestamptz
);

-- Should create index on hashtag
create table Hashtags (
  hashtag text,
  post_id int,
  PRIMARY KEY(hashtag, post_id)  
);
CREATE INDEX hashtag_idx ON Hashtags(hashtag);

-- Should create index on post_id
create table Votes (
  post_id int,
  username char(20),
  vote smallint,
  PRIMARY KEY(post_id, username)
);
CREATE INDEX vote_idx ON Votes(post_id);

(point format is longitude / latitude, distance is in meters)

INSERT INTO Posts (location, caption, owner, image_url, hashtags, created_at) VALUES (ST_GeographyFromText('SRID=4326;POINT(-110 30)'), 'Test caption', 'Test user', 'test url', 'hashtag1|hashtag2', CURRENT_TIMESTAMP ) RETURNING id;
INSERT INTO Posts (location, caption, owner) VALUES (ST_GeographyFromText('SRID=4326;POINT(-109 29)'), 'Test caption', 'Test user' );
INSERT INTO Posts (location, caption, owner) VALUES (ST_GeographyFromText('SRID=4326;POINT(0 49)'), 'Test caption', 'Test user' );


// find all rows within a certain radius:
SELECT * FROM posts
  WHERE ST_DWithin(location, 'POINT(-110 30)', 140456.0);

Use x-www-form-urlencoded

Reverse Geocoding:
http://api.geonames.org/findNearbyPostalCodesJSON?lat=40.73&lng=-73.99&username=akoy93 (name is city name, adminCode1 is state)
http://api.geonames.org/findNearbyPlaceNameJSON?lat=40.730756&lng=-73.991344&username=akoy93 (toponymName is nearby populated place)

add_post logs:

[::1]:64956 POST /add_post
map[Content-Length:[96085] Origin:[null] Content-Type:[multipart/form-data; boundary=----WebKitFormBoundarycbTDr0PA8BdygGA1] Connection:[keep-alive] User-Agent:[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36] Accept-Encoding:[gzip, deflate] Accept-Language:[en-US,en;q=0.8] Cache-Control:[max-age=0] Accept:[text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8]] 
2014/11/30 22:50:51 &{map[caption:[#testing] submit:[Submit] access_token:[KWic9C310nF0SZeOZ4VomCWU3HZPIha5] latitude:[40] longitude:[-76]] map[image:[0xc20803c700]]}
